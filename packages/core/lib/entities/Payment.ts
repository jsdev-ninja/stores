import { z } from "zod";
import { hypBooleanSchema } from "./Atoms";

// 600 - Checking a card number700 - Approved without charge800 - Postpone transaction - success handle ass error

const textSchema = z.string().min(1);
const numericTextSchema = z.string().regex(/^\d+$/, "Must be a numeric string");

export const PayProtocolGeneralSchema = z.object({
	Masof: textSchema, // store masof number
	PassP: textSchema, // store masof password,
	KEY: textSchema, // hyp api key

	Amount: textSchema,
	Order: textSchema.optional(), // order id generated by store

	Tash: numericTextSchema, // Max number of payments that can be selected by the customer
	FixTash: hypBooleanSchema.optional(),

	// tashType: - Payment type optional NOT_IN_USE
	UTF8: hypBooleanSchema, // request is utf8
	UTF8out: hypBooleanSchema, // response is utf8

	MoreData: hypBooleanSchema.optional(), // extra data in response
	J5: hypBooleanSchema.optional(),
});

export const HypSoftTransactionRequestSchema = PayProtocolGeneralSchema.extend({
	action: z.literal("soft"),
	Info: textSchema, // text that will be displayed in transaction, report and the management system.
	CC: numericTextSchema, // token number
	Tmonth: textSchema, // MM
	Tyear: textSchema, // YYYY
	AuthNum: textSchema, //  confirmation number
	cvv: z.string().optional(), // only if required
	// CC2
	// Coin
});

export type THypSoftTransactionRequest = z.infer<typeof HypSoftTransactionRequestSchema>;

export const HypTokenRequestSchema = z.object({
	action: z.literal("getToken"),
	allowFalse: z.literal("True"),
	Masof: textSchema, // store masof number
	PassP: textSchema, // store masof password,
	TransId: numericTextSchema,
	//todo api key is not required???
});
export const HypTokenResponseSchema = z.object({
	Id: numericTextSchema,
	Token: numericTextSchema,
	Tokef: numericTextSchema, // credit card validity date in the format YYMM
	CCode: numericTextSchema, //0 code is valid
});

export const PayProtocolResponseSchema = PayProtocolGeneralSchema.extend({
	Id: textSchema, // transaction Id in Hypay
	ACode: numericTextSchema, // confirmation code from credit card company
	CCode: z.string(), // todo,
	Sign: z.string(), //
	Fild1: z.string(), // client full name
	Fild2: z.string(), // client email
	Fild3: z.string(), // client phone number

	// if more data equal to True
	Bank: z.string().optional(),
	TransType: z.string().optional(),
	Payments: z.string().optional(), // Number of payments charged
	UserId: z.string().optional(),
	Brand: z.string().optional(),
	Issuer: z.string().optional(),
	L4digit: z.string().optional(),
	street: z.string().optional(),
	city: z.string().optional(),
	zip: z.string().optional(),
	cell: z.string().optional(),
	Coin: z.string().optional(),
	Tmonth: z.string().optional(), // MM format
	Tyear: z.string().optional(), // YYYY format
	Hesh: z.string().optional(), // invoice number (if invoice module is not active Hesh would get 0)
	UID: z.string().optional(), // UID unique value receive from response after successful transaction from request with action pay/soft
	spType: z.string().optional(),
	bincard: z.string().optional(),
});

// generate payment link
export const HypPaymentLinkRequestSchema = PayProtocolGeneralSchema.extend({
	Masof: textSchema, // store masof number
	PassP: textSchema, // store masof password,
	KEY: textSchema, // hyp api key
	action: z.literal("APISign"),
	What: z.literal("SIGN"),
	Info: textSchema, // text that will be displayed in transaction, report and the management system.
	Sign: hypBooleanSchema, // Sign on sent parameters in answer
	UTF8: hypBooleanSchema, // request is utf8
	UTF8out: hypBooleanSchema, // response is utf8
	Tash: numericTextSchema, // Max number of payments that can be selected by the customer
	FixTash: hypBooleanSchema.optional(),
	sendemail: hypBooleanSchema.optional(),

	// EzCount Invoice parameters - Pay Protocol
	SendHesh: hypBooleanSchema.optional(), // send invoice in email
	heshDesc: textSchema, // [0~Item 1~1~8][0~Item 2~2~1]
	Pritim: hypBooleanSchema.optional(), // The invoice description contains items

	// client data
	UserId: numericTextSchema,
	ClientName: textSchema, // first name
	ClientLName: textSchema.optional(), // last name
	street: textSchema.optional(),
	city: textSchema.optional(),
	zip: textSchema.optional(),
	phone: textSchema.optional(),
	cell: textSchema.optional(),
	email: textSchema.optional(),
});

// create payment link
export type TPaymentLinkRequest = z.infer<typeof HypPaymentLinkRequestSchema>;

// after payment success (in client)
export type TPayProtocolResponse = z.infer<typeof PayProtocolResponseSchema>;
