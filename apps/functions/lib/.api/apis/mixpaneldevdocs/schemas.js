"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SegmentationSumQuery = exports.SegmentationQueryAverage = exports.SegmentationQuery = exports.SegmentationNumericQuery = exports.RetentionQuery = exports.RetentionFrequencyQuery = exports.QueryTopEvents = exports.QueryMonthsTopEventNames = exports.QueryJql = exports.QueryEventsTopPropertyValues = exports.QueryEventsTopProperties = exports.QueryEventProperties = exports.ListRecentEvents = exports.InsightsQuery = exports.FunnelsQuery = exports.FunnelsListSaved = exports.EngageQuery = exports.CohortsList = exports.ActivityStreamQuery = void 0;
const ActivityStreamQuery = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "distinct_ids": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "A JSON array as a string representing the `distinct_ids` to return activity feeds for. For example: `[\"12a34aa567eb8d-9ab1c26f345b67-89123c45-6aeaa7-89f12af345f678\"]`" }, "from_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to begin querying from. This date is inclusive." }, "to_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to query to. This date is inclusive." } }, "required": ["project_id", "distinct_ids", "from_date", "to_date"] }] }, "response": { "200": { "type": "object", "properties": { "status": { "type": "string" }, "results": { "type": "object", "properties": { "events": { "type": "array", "items": { "type": "object", "properties": { "event": { "type": "string" }, "properties": { "type": "object", "additionalProperties": true } } } } } } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.ActivityStreamQuery = ActivityStreamQuery;
const CohortsList = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." } }, "required": ["project_id"] }] }, "response": { "200": { "type": "array", "items": { "type": "object", "properties": { "count": { "type": "integer" }, "is_visible": { "type": "integer", "description": "0 if not visible. 1 if visible" }, "description": { "type": "string" }, "created": { "type": "string" }, "project_id": { "type": "integer" }, "id": { "type": "integer" }, "name": { "type": "string" } } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.CohortsList = CohortsList;
const EngageQuery = { "formData": { "properties": { "distinct_id": { "type": "string", "description": "A unique identifier used to distinguish an individual profile." }, "distinct_ids": { "type": "string", "description": "A JSON array of distinct_ids to retrieve profiles for.\nExample: `distinct_ids=[\"id1\", \"id2\"]`\n" }, "data_group_id": { "type": "string", "description": "The ID of the group key, used when querying group profiles, click [here](https://docs.mixpanel.com/docs/data-structure/group-analytics#exporting-group-profiles-via-api) for more info." }, "where": { "type": "string", "description": "An expression to filter users (or groups) by. See the [expressions section](ref:segmentation-expressions) above." }, "output_properties": { "type": "array", "items": { "type": "string" }, "description": "A JSON array of names of properties you want returned.\nExample: `output_properties=[\"$last_name\", \"$email\", \"Total Spent\"]`\n\nThis parameter can drastically reduce the amount of data returned by the API when you're not interested in all properties and can speed up queries significantly.\n" }, "session_id": { "type": "string", "description": "A string id provided in the results of a previous query. Using a session_id speeds up api response, and allows paging through results." }, "page": { "type": "integer", "description": "Which page of the results to retrieve. Pages start at zero. If the \"page\" parameter is provided, the session_id parameter must also be provided." }, "behaviors": { "type": "integer", "description": "If you are exporting user profiles using an event selector, you use a `behaviors` parameter in your request. `behaviors` and `filter_by_cohort` are mutually exclusive." }, "as_of_timestamp": { "type": "integer", "description": "This parameter is only useful when also using `behaviors`.\nIf you try to export more than 1k profiles using a `behaviors` parameter and you don't included the parameter `as_of_timestamp`, you'll see the following error:\n\n`request for page in uncached query for params`\n" }, "filter_by_cohort": { "type": "string", "description": "Takes a JSON object with a single key called `id` whose value is the cohort ID. `behaviors` and `filter_by_cohort` are mutually exclusive.\n\nExample: `filter_by_cohort='{\"id\":12345}'`\n" }, "include_all_users": { "type": "boolean", "description": "*\\*only applicable with `filter_by_cohort` parameter*\n\n`include_all_users=true` (default) include all distinct_ids even if they don’t have a user (or group) profile.\n\n`include_all_users=false` include only distinct_ids with user (or group) profile.\n" } }, "type": "object", "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." } }, "required": ["project_id"] }] }, "response": { "200": { "type": "object", "properties": { "page": { "type": "integer", "description": "The page number of the results" }, "page_size": { "type": "integer", "description": "The max number of results in a single page." }, "session_id": { "type": "string" }, "status": { "type": "string", "description": "Indicates whether the request was successful" }, "total": { "type": "integer", "description": "The number of users in the results payload." }, "results": { "type": "array", "items": { "type": "object", "properties": { "$distinct_id": { "type": "integer", "description": "The ID of the user" }, "$properties": { "type": "object", "description": "The properties associated with the user", "additionalProperties": true } } } } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.EngageQuery = EngageQuery;
const FunnelsListSaved = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." } }, "required": ["project_id"] }] }, "response": { "200": { "type": "array", "items": { "type": "object", "properties": { "funnel_id": { "type": "integer", "description": "The id of the funnel." }, "name": { "type": "string", "description": "The name of the funnel" } } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.FunnelsListSaved = FunnelsListSaved;
const FunnelsQuery = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "funnel_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The funnel that you wish to get data for." }, "from_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to begin querying from. This date is inclusive." }, "to_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to query to. This date is inclusive." }, "length": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The number of units (defined by length_unit) each user has to complete the funnel, starting from the time they triggered the first step in the funnel. May not be greater than 90 days. Note that we will query for events past the end of to_date to look for funnel completions. This defaults to the value that was previously saved in the UI for this funnel." }, "length_unit": { "type": "string", "enum": ["day", "hour", "minute", "second"], "description": "The unit applied to the length parameter can be \"second\", \"minute\", \"hour\", or \"day\". Defaults to the value that was previously saved in the UI for this funnel.", "examples": ["day"], "$schema": "http://json-schema.org/draft-04/schema#" }, "interval": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The number of days you want each bucket to contain. The default value is 1." }, "unit": { "type": "string", "enum": ["day", "week", "month"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "This is an alternate way of specifying interval and can be \"day\", \"week\", or \"month\"." }, "on": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The property expression to segment the event on. See the [expression to segment](ref:segmentation-expressions) below." }, "where": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "An expression to filter events by. See the [expression to segment](ref:segmentation-expressions) below." }, "limit": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Return the top property values. Defaults to 255 if not explicitly included. Maximum value 10,000. This parameter does nothing if \\\"on\\\" is not specified." } }, "required": ["project_id", "funnel_id", "from_date", "to_date"] }] }, "response": { "200": { "type": "object", "properties": { "meta": { "type": "object", "properties": { "dates": { "type": "array", "items": { "type": "string", "description": "Date in YYYY-mm-dd format" } } } }, "data": { "type": "object", "additionalProperties": { "type": "object", "properties": { "steps": { "type": "array", "items": { "type": "object", "properties": { "count": { "type": "integer", "description": "Number of conversions." }, "goal": { "type": "string", "description": "The name of the event" }, "step_conv_ratio": { "type": "number", "format": "float", "description": "Conversion from previous step", "minimum": -3.402823669209385e+38, "maximum": 3.402823669209385e+38 }, "overall_conv_ratio": { "type": "number", "format": "float", "description": "Conversion from start of funnel", "minimum": -3.402823669209385e+38, "maximum": 3.402823669209385e+38 }, "avg_time": { "type": "integer", "description": "mean time to convert; null for step 0." }, "avg_time_from_start": { "type": "integer", "description": "time to convert from first step." }, "event": { "type": "string", "description": "The name of the event" }, "step_label": { "type": "string", "description": "same as event OR custom event name" }, "custom_event": { "type": "boolean", "description": "`true` if the event is a custom event, otherwise key is not present" }, "custom_event_id": { "type": "integer", "description": "Only present if the event is a custom event." } } } }, "analysis": { "type": "object", "properties": { "completion": { "type": "integer", "description": "Count in final step" }, "starting_amount": { "type": "integer", "description": "Count in first step" }, "steps": { "type": "integer", "description": "Number of steps" }, "worst": { "type": "integer", "description": "Step with highest drop off" } } } } } } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.FunnelsQuery = FunnelsQuery;
const InsightsQuery = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "bookmark_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The ID of your Insights report can be found from the url: `https://mixpanel.com/project/<YOUR_PROJECT_ID>/view/<YOUR_WORKSPACE_ID>/app/boards#id=12345&editor-card-id=%22report-<YOUR_BOOKMARK_ID>%22`" } }, "required": ["project_id", "bookmark_id"] }] }, "response": { "200": { "type": "object", "properties": { "computed_at": { "type": "string" }, "date_range": { "type": "object", "properties": { "from_date": { "type": "string" }, "to_date": { "type": "string" } } }, "headers": { "type": "array", "description": "Explanation of what the nested keys mean in `series`.", "items": { "type": "string" } }, "series": { "type": "object", "description": "Maps event name of event to an object with dates as keys and number of instances as values. For example:\n\n```json\n{\n  'Viewed page': {\n    '2020-08-17T00:00:00-07:00': 7832,\n    '2020-08-24T00:00:00-07:00': 6234,\n  }\n}\n```\n", "additionalProperties": true } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.InsightsQuery = InsightsQuery;
const ListRecentEvents = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "event": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The event or events that you wish to get data for, encoded as a JSON array. Example format: \"[\"play song\", \"log in\", \"add playlist\"]\"." }, "type": { "type": "string", "enum": ["general", "unique", "average"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The analysis type you would like to get data for - such as general, unique, or average events. Valid values: \"general\", \"unique\", or \"average\"." }, "unit": { "type": "string", "enum": ["minute", "hour", "day", "week", "month"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "This can be \"minute\", \"hour\", \"day\", \"week\", or \"month\". It determines the level of granularity of the data you get back. Note that you cannot get hourly uniques." }, "interval": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The number of \"units\" to return data for - minutes, hours, days, weeks, or months. 1 will return data for the current unit (minute, hour, day, week or month). 2 will return the current and previous units, and so on. Specify either interval or from_date and to_date." }, "from_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to begin querying from. This date is inclusive." }, "to_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to query to. This date is inclusive." }, "format": { "type": "string", "enum": ["json", "csv"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The data return format, such as JSON or CSV. Options: \"json\" (default), \"csv\"." } }, "required": ["project_id", "event", "type", "unit", "from_date", "to_date"] }] }, "response": { "200": { "type": "object", "properties": { "data": { "type": "object", "properties": { "series": { "type": "array", "items": { "type": "string", "description": "All dates included in `values`" } }, "values": { "type": "object", "additionalProperties": { "type": "object", "description": "A mapping of the date of each unit to the number of events. (ex. {\"2010-05-30\": 6})", "additionalProperties": true }, "description": "Keys are the names of events" } } }, "legend_size": { "type": "integer", "description": "The number of events defined in `values`" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.ListRecentEvents = ListRecentEvents;
const QueryEventProperties = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "event": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The event that you wish to get data for. Note: this is a single event name, not an array." }, "name": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The name of the property you would like to get data for." }, "values": { "type": "array", "items": { "type": "string" }, "$schema": "http://json-schema.org/draft-04/schema#", "description": "The specific property values that you would like to get data for, encoded as a JSON array. Example: If you have a property \"gender\" you may have values \"male\", \"female\" and \"unknown\". If you just want data for female and unknown users, you can include a values property that looks like \"[\"female\", \"unknown\"]\"." }, "type": { "type": "string", "enum": ["general", "unique", "average"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The analysis type you would like to get data for - such as general, unique, or average events. Valid values: \"general\", \"unique\", or \"average\"." }, "unit": { "type": "string", "enum": ["minute", "hour", "day", "week", "month"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "This can be \"minute\", \"hour\", \"day\", \"week\", or \"month\". It determines the level of granularity of the data you get back. Note that you cannot get hourly uniques." }, "interval": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The number of \"units\" to return data for - minutes, hours, days, weeks, or months. 1 will return data for the current unit (minute, hour, day, week or month). 2 will return the current and previous units, and so on. Specify either interval or from_date and to_date." }, "from_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to begin querying from. This date is inclusive." }, "to_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to query to. This date is inclusive." }, "format": { "type": "string", "enum": ["json", "csv"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The data return format, such as JSON or CSV. Options: \"json\" (default), \"csv\"." }, "limit": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The maximum number of values to return. Defaults to 255." } }, "required": ["project_id", "event", "name", "type", "unit", "from_date", "to_date"] }] }, "response": { "200": { "type": "object", "properties": { "data": { "type": "object", "properties": { "series": { "type": "array", "items": { "type": "string", "description": "All dates we have data for in the response." } }, "values": { "type": "object", "additionalProperties": true } } }, "legend_size": { "type": "integer" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.QueryEventProperties = QueryEventProperties;
const QueryEventsTopProperties = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "event": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The event that you wish to get data for. Note: this is a single event name, not an array." }, "limit": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The maximum number of properties to return. Defaults to 10." } }, "required": ["project_id", "event"] }] }, "response": { "200": { "type": "object", "description": "The keys are the name of the properties", "additionalProperties": { "type": "object", "properties": { "count": { "type": "integer", "description": "The number of events with that property" } } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.QueryEventsTopProperties = QueryEventsTopProperties;
const QueryEventsTopPropertyValues = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "event": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The event that you wish to get data for. Note: this is a single event name, not an array." }, "name": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The name of the property you would like to get data for." }, "limit": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The maximum number of values to return. Defaults to 255." } }, "required": ["project_id", "event", "name"] }] }, "response": { "200": { "type": "array", "description": "Property values for the specified event property", "items": { "type": "string" }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.QueryEventsTopPropertyValues = QueryEventsTopPropertyValues;
const QueryJql = { "formData": { "required": ["script"], "properties": { "script": { "type": "string", "default": "function main(){\n  return Events(params)\n    .groupBy(\n      [\"name\"],\n      mixpanel.reducer.count()\n    )\n}\n", "description": "The script to run.", "examples": ["function main(){\n  return Events(params)\n    .groupBy(\n      [\"name\"],\n      mixpanel.reducer.count()\n    )\n}\n"] }, "params": { "type": "string", "format": "blob", "default": "{\n  \"scriptParam\": \"paramValue\"\n}\n", "description": "A JSON-encoded object that will be made available to the script as the params global variable.", "examples": ["{\n  \"from_date\": 2016-01-01T00:00:00.000Z,\n  \"to_date\": 2016-01-07T00:00:00.000Z\n}\n"] } }, "type": "object", "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." } }, "required": ["project_id"] }] }, "response": { "200": { "type": "array", "items": { "type": "object", "additionalProperties": true }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.QueryJql = QueryJql;
const QueryMonthsTopEventNames = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "type": { "type": "string", "enum": ["general", "unique", "average"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The analysis type you would like to get data for - such as general, unique, or average events. Valid values: \"general\", \"unique\", or \"average\"." }, "limit": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The maximum number of values to return. Defaults to 255." } }, "required": ["project_id", "type"] }] }, "response": { "200": { "type": "array", "description": "List of names in descending alphabetical order.", "items": { "type": "string", "description": "Event name", "examples": ["Viewed page"] }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.QueryMonthsTopEventNames = QueryMonthsTopEventNames;
const QueryTopEvents = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "type": { "type": "string", "enum": ["general", "unique", "average"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The analysis type you would like to get data for - such as general, unique, or average events. Valid values: \"general\", \"unique\", or \"average\"." }, "limit": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The maximum number of events to return. Defaults to 100." } }, "required": ["project_id", "type"] }] }, "response": { "200": { "type": "object", "properties": { "events": { "type": "array", "items": { "type": "object", "properties": { "amount": { "type": "integer", "description": "Number of events" }, "event": { "type": "string", "description": "The name of the event" }, "percent_change": { "type": "number", "format": "float", "description": "The percent change from yesterday", "minimum": -3.402823669209385e+38, "maximum": 3.402823669209385e+38 } } } }, "type": { "type": "string" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.QueryTopEvents = QueryTopEvents;
const RetentionFrequencyQuery = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "from_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to begin querying from. This date is inclusive." }, "to_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to query to. This date is inclusive." }, "unit": { "type": "string", "enum": ["day", "week", "month"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The overall time period to return frequency of actions for can be \"day\", \"week\", or \"month\"." }, "addiction_unit": { "type": "string", "enum": ["hour", "day"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The granularity to return frequency of actions at can be \"hour\" or \"day\"." }, "event": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The event to generate returning counts for." }, "where": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "An expression to filter the returning events by. See the [expressions section](ref:segmentation-expressions) above." }, "on": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The property expression to segment the second event on. See the [expressions section](ref:segmentation-expressions) above." }, "limit": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Return the top limit segmentation values. This parameter does nothing if \"on\" is not specified." } }, "required": ["project_id", "from_date", "to_date", "unit", "addiction_unit"] }] }, "response": { "200": { "type": "object", "properties": { "data": { "type": "object", "additionalProperties": { "type": "array", "items": { "type": "integer" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.RetentionFrequencyQuery = RetentionFrequencyQuery;
const RetentionQuery = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "from_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to begin querying from. This date is inclusive." }, "to_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to query to. This date is inclusive." }, "retention_type": { "type": "string", "enum": ["birth", "compounded"], "examples": ["birth"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Must be either \"birth\" or \"compounded\". Defaults to \"birth\". The “birth” retention type corresponds to first time retention. The “compounded” retention type corresponds to recurring retention. See the [Types of Retention](https://help.mixpanel.com/hc/en-us/articles/360001370146) article for more information." }, "born_event": { "type": "string", "examples": ["Added to cart"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The first event a user must do to be counted in a birth retention cohort. Required when retention_type is \"birth\"; ignored otherwise." }, "event": { "type": "string", "examples": ["Viewed report"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The event to generate returning counts for. Applies to both birth and compounded retention. If not specified, we look across all events." }, "born_where": { "type": "string", "examples": ["properties[\"$os\"]==\"Linux\""], "$schema": "http://json-schema.org/draft-04/schema#", "description": "An expression to filter born_events by. See the [expressions section](ref:segmentation-expressions) above." }, "where": { "type": "string", "examples": ["properties[\"$os\"]==\"Linux\""], "$schema": "http://json-schema.org/draft-04/schema#", "description": "An expression to filter born_events by. See the [expressions section](ref:segmentation-expressions) above." }, "interval": { "type": "integer", "examples": [1], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The number of units (can be specified in either days, weeks, or months) that you want per individual bucketed interval. May not be greater than 90 days if days is the specified unit. The default value is 1." }, "interval_count": { "type": "integer", "examples": [1], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The number of individual buckets, or intervals, that are returned; defaults to 1. Note that we include a \"0th\" interval for events that take place less than one interval after the initial event." }, "unit": { "type": "string", "enum": ["day", "week", "month"], "examples": ["day"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The interval unit. It can be \"day\", \"week\", or \"month\". Default is \"day\"." }, "unbounded_retention": { "type": "boolean", "default": false, "examples": [false], "$schema": "http://json-schema.org/draft-04/schema#", "description": "A counting method for retention queries where retention values accumulate from right to left, i.e. day N is equal to users who retained on day N and any day after. The default value of false does not perform this accumulation. [Learn more about Counting Method](https://help.mixpanel.com/hc/en-us/articles/360045484191)." }, "on": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The property expression to segment the second event on. See the [expressions section](ref:segmentation-expressions) above." }, "limit": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Return the top limit segmentation values. This parameter does nothing if \"on\" is not specified." } }, "required": ["project_id", "from_date", "to_date"] }] }, "response": { "200": { "type": "object", "additionalProperties": { "type": "object", "properties": { "counts": { "type": "array", "items": { "type": "integer" } }, "first": { "type": "integer" } } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.RetentionQuery = RetentionQuery;
const SegmentationNumericQuery = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "event": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The event that you wish to get data for. Note: this is a single event name, not an array." }, "from_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to begin querying from. This date is inclusive." }, "to_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to query to. This date is inclusive." }, "on": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The property expression to segment the event on. This expression must be a numeric property. See the [expressions section](ref:segmentation-expressions) below." }, "unit": { "type": "string", "enum": ["hour", "day"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "This can be \"hour\" or \"day\". This determines the buckets into which the property values that you segment on are placed. The default value is \"day\"." }, "where": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "An expression to filter events by. See the [expression to segment](ref:segmentation-expressions) below." }, "type": { "type": "string", "enum": ["general", "unique", "average"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "This can be \"hour\" or \"day\". This determines the buckets into which the property values that you segment on are placed. The default value is \"day\"." } }, "required": ["project_id", "event", "from_date", "to_date", "on"] }] }, "response": { "200": { "type": "object", "properties": { "data": { "type": "object", "properties": { "series": { "type": "array", "items": { "type": "string", "description": "All dates we have data for in the response." } }, "values": { "type": "object", "additionalProperties": { "type": "object", "description": "The range of the bucket", "additionalProperties": { "type": "integer", "description": "A mapping of the date of each unit to the number of specified events that took place. (ex. {\"2010-05-30\": 6})" } } } } }, "legend_size": { "type": "integer", "description": "List of all dates." } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.SegmentationNumericQuery = SegmentationNumericQuery;
const SegmentationQuery = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "event": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The event that you wish to get data for. Note: this is a single event name, not an array." }, "from_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to begin querying from. This date is inclusive." }, "to_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to query to. This date is inclusive." }, "on": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The property expression to segment the event on. See the [expression to segment](ref:segmentation-expressions) below." }, "unit": { "type": "string", "enum": ["minute", "hour", "day", "month"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "This can be \"minute\", \"hour\", \"day\", or \"month\". This determines the buckets into which the property values that you segment on are placed. The default value is \"day\"." }, "interval": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Optional parameter in lieu of 'unit' when 'type' is not 'general'. Determines the number of days your results are bucketed into can be used with or without 'from_date' and 'to_date' parameters." }, "where": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "An expression to filter events by. See the [expression to segment](ref:segmentation-expressions) below." }, "limit": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Return the top property values. Defaults to 60. Maximum value 10,000. This parameter does nothing if \"on\" is not specified." }, "type": { "type": "string", "enum": ["general", "unique", "average"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "This can be \"general\", \"unique\", or \"average\". If this is set to \"unique\", we return the unique count of events or property values. If set to \"general\", we return the total, including repeats. If set to \"average\", we return the average count. The default value is \"general\"." }, "format": { "type": "string", "enum": ["csv"], "description": "Can be set to \"csv\".", "$schema": "http://json-schema.org/draft-04/schema#" } }, "required": ["project_id", "event", "from_date", "to_date"] }] }, "response": { "200": { "type": "object", "properties": { "data": { "type": "object", "properties": { "series": { "type": "array", "items": { "type": "string", "description": "All dates we have data for in the response." } }, "values": { "type": "object", "additionalProperties": true } } }, "legend_size": { "type": "integer", "description": "List of all dates." } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.SegmentationQuery = SegmentationQuery;
const SegmentationQueryAverage = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "event": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The event that you wish to get data for. Note: this is a single event name, not an array." }, "from_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to begin querying from. This date is inclusive." }, "to_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to query to. This date is inclusive." }, "on": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The expression to sum per unit time. The result of the expression should be a numeric value. If the expression is not numeric, a value of 0.0 is assumed. See the [expressions section](ref:segmentation-expressions) below." }, "unit": { "type": "string", "enum": ["hour", "day"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "This can be \"hour\" or \"day\". This determines the buckets into which the property values that you segment on are placed. The default value is \"day\"." }, "where": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "An expression to filter events by. See the [expression to segment](ref:segmentation-expressions) below." } }, "required": ["project_id", "event", "from_date", "to_date", "on"] }] }, "response": { "200": { "type": "object", "properties": { "results": { "type": "object", "additionalProperties": { "type": "number", "format": "float", "minimum": -3.402823669209385e+38, "maximum": 3.402823669209385e+38 } }, "status": { "type": "string" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.SegmentationQueryAverage = SegmentationQueryAverage;
const SegmentationSumQuery = { "metadata": { "allOf": [{ "type": "object", "properties": { "project_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Required if using service account to authenticate request." }, "workspace_id": { "type": "integer", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The id of the workspace if applicable." }, "event": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The event that you wish to get data for. Note: this is a single event name, not an array." }, "from_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to begin querying from. This date is inclusive." }, "to_date": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The date in yyyy-mm-dd format to query to. This date is inclusive." }, "on": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "The expression to sum per unit time. The result of the expression should be a numeric value. If the expression is not numeric, a value of 0.0 is assumed. See the [expressions section](ref:segmentation-expressions) below." }, "unit": { "type": "string", "enum": ["hour", "day"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "This can be \"hour\" or \"day\". This determines the buckets into which the property values that you segment on are placed. The default value is \"day\"." }, "where": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "An expression to filter events by. See the [expression to segment](ref:segmentation-expressions) below." } }, "required": ["project_id", "event", "from_date", "to_date", "on"] }] }, "response": { "200": { "type": "object", "properties": { "status": { "type": "string" }, "computed_at": { "type": "string" }, "results": { "type": "object", "additionalProperties": { "type": "integer" } } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.SegmentationSumQuery = SegmentationSumQuery;
//# sourceMappingURL=schemas.js.map